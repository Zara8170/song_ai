name: CI/CD for AI Server

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.AI_DOCKER_IMAGE_NAME }}

jobs:
  build-and-push-ai:
    name: Build and Push AI Server Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Extract REGISTRY_HOST
        run: |
          REGISTRY_HOST="$(echo '${{ env.IMAGE_NAME }}' | cut -d'/' -f1)"
          echo "REGISTRY_HOST=$REGISTRY_HOST" >> "$GITHUB_ENV"

      - name: Check registry reachability (optional)
        run: |
          nslookup "$REGISTRY_HOST" || true
          curl -I --max-time 10 "https://$REGISTRY_HOST/v2/" || true

      - name: Docker login with access token (robust)
        run: |
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin "https://$REGISTRY_HOST"

      - name: Build image
        run: |
          docker build -t "${{ env.IMAGE_NAME }}:latest" .

      - name: Push image with retries (reduced parallelism)
        env:
          DOCKER_CLIENT_TIMEOUT: "600"
          COMPOSE_HTTP_TIMEOUT: "600"
        run: |
          mkdir -p ~/.docker
          if [ -f ~/.docker/config.json ]; then
            jq '. + {"maxConcurrentUploads": 1, "experimental": "enabled"}' ~/.docker/config.json > ~/.docker/config.json.tmp || true
            mv ~/.docker/config.json.tmp ~/.docker/config.json || true
          else
            echo '{"maxConcurrentUploads": 1, "experimental": "enabled"}' > ~/.docker/config.json
          fi

          n=0
          until [ $n -ge 5 ]; do
            docker push "${{ env.IMAGE_NAME }}:latest" && exit 0
            n=$((n+1))
            echo "push failed. retry $n/5..."
            sleep $((5*n))
          done
          echo "push failed after retries" >&2
          exit 1

  deploy-ai:
    name: Deploy AI Server to GCP VM
    needs: build-and-push-ai
    runs-on: ubuntu-latest

    steps:
      - name: Test SSH port from runner (optional)
        run: nc -vz ${{ secrets.GCP_VM_HOST }} 22

      - name: SSH and Deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USER }}
          key: ${{ secrets.GCP_VM_SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            IMAGE_NAME='${{ secrets.AI_DOCKER_IMAGE_NAME }}'
            REGISTRY_HOST="$(echo "$IMAGE_NAME" | cut -d'/' -f1)"

            # (권장) VM에서 Artifact Registry pull 인증
            if [ -n "${{ secrets.AR_PULL_KEY_JSON_B64 || '' }}" ]; then
              echo "${{ secrets.AR_PULL_KEY_JSON_B64 }}" | base64 -d > /tmp/ar_key.json
              cat /tmp/ar_key.json | docker login -u _json_key --password-stdin "https://$REGISTRY_HOST"
              rm -f /tmp/ar_key.json
            else
              if command -v gcloud >/dev/null 2>&1; then
                gcloud auth configure-docker "$REGISTRY_HOST" -q || true
              fi
            fi

            export AI_DOCKER_IMAGE_NAME="$IMAGE_NAME"

            cd ~/song_ai || { mkdir -p ~/song_ai; cd ~/song_ai; }

            if command -v git >/dev/null 2>&1; then
              [ -d .git ] && git pull origin main || true
            fi

            docker pull "${AI_DOCKER_IMAGE_NAME}:latest"

            if command -v docker-compose >/dev/null 2>&1; then
              docker-compose pull
              docker-compose up -d --force-recreate --remove-orphans
            elif docker compose version >/dev/null 2>&1; then
              docker compose pull
              docker compose up -d --force-recreate --remove-orphans
            else
              echo "docker-compose/compose not found" >&2; exit 1
            fi

            docker image prune -f
